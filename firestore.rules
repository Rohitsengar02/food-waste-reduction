rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }
    
    // Food Listings collection rules
    match /foodListings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // More permissive update rule to fix checkout issues
      // This allows any authenticated user to update listings during checkout
      allow update: if isAuthenticated();
      
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Wishlist collection rules
    match /wishlist/{wishlistId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Listings collection rules
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Conversations collection rules
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if false;
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                   exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      
      allow create: if isAuthenticated() && 
                     request.resource.data.senderId == request.auth.uid &&
                     exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants;
      
      allow update: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      
      allow delete: if false;
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      // Allow users to read their own orders (as seller or buyer)
      allow read: if isAuthenticated() && 
                  (resource.data.sellerId == request.auth.uid || 
                   resource.data.buyerId == request.auth.uid);
      
      // Allow users to create orders where they are the buyer
      allow create: if isAuthenticated() && 
                    request.resource.data.buyerId == request.auth.uid &&
                    request.resource.data.size() <= 50 && // Limit the size of order documents
                    request.resource.data.keys().hasAll(['buyerId', 'sellerId', 'listingId', 'totalAmount', 'shippingAddress']);
      
      // Allow updates only by the buyer or seller involved in the order
      allow update: if isAuthenticated() && 
                    (resource.data.sellerId == request.auth.uid || 
                     resource.data.buyerId == request.auth.uid) &&
                    (resource.data.sellerId == request.auth.uid ?
                      // Sellers can only update certain fields
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['trackingInfo', 'orderStatus']) :
                      // Buyers can only update certain fields
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['cancelReason', 'orderStatus', 'customerFeedback']));
      
      // Allow listing all orders for a specific user (as seller or buyer)
      allow list: if isAuthenticated() &&
                  (request.query.limit <= 50) &&  // Limit the number of results
                  ((request.query.where('sellerId', '==', request.auth.uid).size() == 1) ||
                   (request.query.where('buyerId', '==', request.auth.uid).size() == 1));
      
      // Block order deletion for audit trail purposes
      allow delete: if false;
    }
    
    // Shipping addresses collection rules
    match /shipping_addresses/{addressId} {
      // Allow users to read their own shipping addresses
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow users to create their own shipping addresses
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.size() <= 20; // Limit fields for security
      
      // Allow users to update their own shipping addresses
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    request.resource.data.userId == request.auth.uid;
      
      // Allow users to delete their own shipping addresses
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
